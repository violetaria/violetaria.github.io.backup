<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">get lost here</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml" />
<link rel="alternate" type="text/html" href="http://localhost:4000" />
<updated>2017-09-24T08:33:46-04:00</updated>
<id>http://localhost:4000/</id>
<author>
  <name>Terri Chu</name>
  <uri>http://localhost:4000/</uri>
  <email>terri.chu.dev@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Presentation to Video]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2017/07/presentation-and-video-how-to/" />
  <id>http://localhost:4000/2017/07/presentation-and-video-how-to</id>
  <published>2017-07-08T00:00:00-04:00</published>
  <updated>2017-07-08T00:00:00-04:00</updated>
  <author>
    <name>Terri Chu</name>
    <uri>http://localhost:4000</uri>
    <email>terri.chu.dev@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;My friend recorded our We Rise in Tech Conference presentations and I wanted to get them up online. I had the idea to also put our slides in the video and figured out a way to do it. Here’s a walk through of what it took to get our videos ready.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note to future self and others: Record your slide presentation DURING your talk using your presenting tool (Keynote, PowerPoint, Google, etc.) because it makes the syncing a lot easier.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-you-need&quot;&gt;What you need&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Presentation program that allows recording of presentation (I used Keynote)&lt;/li&gt;
  &lt;li&gt;Video recording of your presentation with audio (We used an iPhone on a tripod)&lt;/li&gt;
  &lt;li&gt;iMovie (or Windows Movie Maker or equivalent)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-1---record-your-presentation-slides&quot;&gt;Step 1 - Record your presentation slides&lt;/h2&gt;

&lt;p&gt;If you did not record your slide deck while presenting, have no fear!  Just play back your video (on your phone, another computer, anywhere you can watch it) and set your presenting tool to record your presentation. Start the recording (mute the microphone if possible) and follow along with your video recording, moving through it as close as you can to the video.&lt;/p&gt;

&lt;p&gt;Screen shots of how to record in Keynote&lt;/p&gt;

&lt;h4 id=&quot;record-slideshow&quot;&gt;Record Slideshow&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-07-08/01.png&quot; alt=&quot;Record&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;start-recording-and-mute-mic&quot;&gt;Start Recording and Mute Mic&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-07-08/02.png&quot; alt=&quot;Start&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-2---export-recorded-slides-to-video&quot;&gt;Step 2 - Export recorded slides to video&lt;/h2&gt;

&lt;p&gt;I chose to export to QuickTime because I use a Mac, but if you’re on a Windows or other O/S use whatever works for you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-07-08/03.png&quot; alt=&quot;Export&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-3---combine-in-imovie&quot;&gt;Step 3 - Combine in iMovie&lt;/h2&gt;

&lt;p&gt;Open iMovie and start a new project.&lt;/p&gt;

&lt;h4 id=&quot;drag-the-video-of-you-speaking-in-first&quot;&gt;Drag the video of you speaking in first.&lt;/h4&gt;

&lt;p&gt;This is into the lower left hand corner of iMovie.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-07-08/04.png&quot; alt=&quot;First Video&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;drag-the-video-of-your-slides-above-the-first-video&quot;&gt;Drag the video of your slides above the first video.&lt;/h4&gt;

&lt;p&gt;Line it up so they start at the same time (fixable through drag and drop if you don’t get it right the first time). Make sure to not drag directly on TOP of the other video directly, it should sit above it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-07-08/05.png&quot; alt=&quot;Second Video&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;set-the-second-video-as-picture-in-picture&quot;&gt;Set the second video as Picture in Picture&lt;/h4&gt;

&lt;p&gt;Select the second video you dragged in (the one on top). You should see an icon with two squares on the right hand side (above the preview window). This button controls the Video Overlay Settings. Click the button and choose &lt;em&gt;Picture in Picture&lt;/em&gt;. Size and position your slides where you want them to live for the duration of the talk.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-07-08/06.png&quot; alt=&quot;Video Overlay Settings&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;delete-audio-from-one-of-the-videos&quot;&gt;Delete audio from one of the videos&lt;/h4&gt;

&lt;p&gt;If you recorded your presentation while you spoke, your slide recording may have audio (which will play along with your video recording). We’re going to remove whichever audio you don’t want for your final product. Select which video stream you want to delete the audio from, right click and select &lt;em&gt;Detatch Audio&lt;/em&gt;. The Audio will appear below both video streams. You can select the audio and hit delete to remove it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-07-08/07.png&quot; alt=&quot;Delete Second Audio&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-4---tweak-video-alignment-and-settings&quot;&gt;Step 4 - Tweak video alignment and settings&lt;/h2&gt;

&lt;p&gt;Lastly, watch your video and make sure it lines up (same timeline, slides change when they should) and that the volume is good. Make any adjustments here before we export.&lt;/p&gt;

&lt;h2 id=&quot;step-5---export-video-and-upload&quot;&gt;Step 5 - Export video and upload&lt;/h2&gt;

&lt;p&gt;iMove gives quite a few options here. I chose to upload directly to YouTube, but you can also export to a video.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hopefully this post helps you get your first presentation video online!  Good luck and happy presenting :)&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2017/07/presentation-and-video-how-to/&quot;&gt;Presentation to Video&lt;/a&gt; was originally published by Terri Chu at &lt;a href=&quot;http://localhost:4000&quot;&gt;get lost here&lt;/a&gt; on July 08, 2017.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[chicken dumplings 1]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2017/03/chicken-dumplings/" />
  <id>http://localhost:4000/2017/03/chicken-dumplings</id>
  <published>2017-03-12T00:00:00-05:00</published>
  <updated>2017-03-12T00:00:00-05:00</updated>
  <author>
    <name>Terri Chu</name>
    <uri>http://localhost:4000</uri>
    <email>terri.chu.dev@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Hubby and I are making dumplings again, every Sunday if we can manage it.  It’s been a nice adventure to learn about his culture while exploring ways to incorporate things from mine into it.  We’ve been straying away from traditional pork and scallion dumplings and finally found frozen dumpling wrappers that are good enough to use (although I prefer fresh dough if we can make it).  Last week’s experiment (3 mushroom dumplings) was not super successful, so I decided to go with flavors I’ve had in store bought dumplings.&lt;/p&gt;

&lt;p&gt;This week, we used ground chicken for the main protein and threw in some corn and wood ear mushrooms in place of our typical ground pork.  We often add in brown beech (or any fresh mushrooms we have laying around) since they help make the dumplings tender.  If you’ve ever had a dumpling that has a meatball mouth feel, you will understand!  The dumplings came out great and I’ll be making these again. Here’s what we used and some pictures:&lt;/p&gt;

&lt;h2 id=&quot;chicken-wood-ear-and-corn-dumplings&quot;&gt;Chicken, Wood Ear, and Corn Dumplings&lt;/h2&gt;

&lt;p&gt;Ingredients&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ground chicken 1.25 lbs&lt;/li&gt;
  &lt;li&gt;salt&lt;/li&gt;
  &lt;li&gt;Chinese cooking wine/Xao Xing (worth a trip to an asian market for)&lt;/li&gt;
  &lt;li&gt;ginger&lt;/li&gt;
  &lt;li&gt;garlic&lt;/li&gt;
  &lt;li&gt;corn (frozen, I’d recommend fresh or squeezing out water)&lt;/li&gt;
  &lt;li&gt;rehydrated or fresh wood ear mushrooms&lt;/li&gt;
  &lt;li&gt;6-8 green onions&lt;/li&gt;
  &lt;li&gt;napa cabbage&lt;/li&gt;
  &lt;li&gt;sesame oil&lt;/li&gt;
  &lt;li&gt;veggie oil&lt;/li&gt;
  &lt;li&gt;dumpling wrappers&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ingredients&quot;&gt;Ingredients&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/2017-03-12/ingredients.jpg&quot; alt=&quot;Ingredients&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;mixed-filling&quot;&gt;Mixed Filling&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/2017-03-12/mixed.jpg&quot; alt=&quot;Mixed Filling&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ready-to-boil&quot;&gt;Ready to Boil&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/2017-03-12/preboil.jpg&quot; alt=&quot;Ready to boil&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;post-boil&quot;&gt;Post Boil&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/2017-03-12/post_boil.jpg&quot; alt=&quot;Post Boil&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;yummmmmm&quot;&gt;Yummmmmm&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/2017-03-12/ready_to_eat.jpg&quot; alt=&quot;Yum&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2017/03/chicken-dumplings/&quot;&gt;chicken dumplings 1&lt;/a&gt; was originally published by Terri Chu at &lt;a href=&quot;http://localhost:4000&quot;&gt;get lost here&lt;/a&gt; on March 12, 2017.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[postman tips and tricks]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2015/12/postman-tips-and-tricks/" />
  <id>http://localhost:4000/2015/12/postman-tips-and-tricks</id>
  <published>2015-12-22T00:00:00-05:00</published>
  <updated>2015-12-22T00:00:00-05:00</updated>
  <author>
    <name>Terri Chu</name>
    <uri>http://localhost:4000</uri>
    <email>terri.chu.dev@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;I’ve been using postman for awhile now, and I found some amazing features during the last project I worked on.  I think they are worthy enough to share, so here we go!&lt;/p&gt;

&lt;p&gt;##Collections&lt;a name=&quot;collections&quot;&gt;&lt;/a&gt;
Postman starts you out in the History tab.  The tab keeps a running log of every request you send which is great for testing your application (you can go back and select previously run request).  However, it also offers up the ability to create Collections of requests.&lt;/p&gt;

&lt;p&gt;To add a request to a collection, highlight the request(s) in the History tab and click the “Add to Collection” button&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman_collections_1.png&quot; alt=&quot;Add to Collection&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You have the choice of adding to an existing collection or creating a new one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman_collections_2.png&quot; alt=&quot;Add to Collection&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you have created a collection, you can easily access the requests by going to the Collections tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman_collections_3.png&quot; alt=&quot;View Collection&quot; /&gt;&lt;/p&gt;

&lt;p&gt;##Environments&lt;a name=&quot;environments&quot;&gt;&lt;/a&gt;
During my last project, I routinely had to move from testing against localhost and heroku.  This meant having duplicates of each request and I figured there had to be a better way.  Postman provides the “Environments” feature to help with this exact problem.  To add an environment, click the drop down in the upper right corner that most likely say ‘No Environment’ and select Manage Environments.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman_environments_1.png&quot; alt=&quot;Manage Environments&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From this screen you can add a new environment or click on an existing one to manage the variables you have set.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman_environments_2.png&quot; alt=&quot;Manage Environments&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Add a new name for your environment and start adding variables with key/value pairs (just like you would in a POST request).  Some of the more helpful variables I have found are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;URL (including port)&lt;/li&gt;
  &lt;li&gt;username&lt;/li&gt;
  &lt;li&gt;password&lt;/li&gt;
  &lt;li&gt;API token&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman_environments_3.png&quot; alt=&quot;Manage Environments&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you have your variables set, you must replace the values in each request with the variable names.  Postman uses `` to denote variables.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman_environments_4.png&quot; alt=&quot;Manage Environments&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The true beauty of this setup means you can easily switch from one environment to another (for example, heroku to localhost) and run the same request with little work on your end!  Time saver FTW :)&lt;/p&gt;

&lt;p&gt;##Arrays&lt;a name=&quot;arrays&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last neat trick I learned was how to send in arrays and arrays of hashes.  This was imperative as I did not want to release API code to my front end teammates without testing it first!  Below is the format required by my API:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Flour-Power/Back-End/blob/master/README.md&quot;&gt;[snippit from my awesome API docs]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Example Request&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Cheesy Eggs&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  	&lt;span class=&quot;nt&quot;&gt;&amp;quot;category_names&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Desserts&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Entrees&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;quot;steps&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Turn on oven to 350&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      		&lt;span class=&quot;s2&quot;&gt;&amp;quot;Mix eggs, bacon, and cheese together in a large bowl&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      		&lt;span class=&quot;s2&quot;&gt;&amp;quot;Pour into a cast iron pan&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      		&lt;span class=&quot;s2&quot;&gt;&amp;quot;Bake in oven for 15-20 minutes&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
 	&lt;span class=&quot;nt&quot;&gt;&amp;quot;ingredients&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  		&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  			&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  				&lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;carrots&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  				&lt;span class=&quot;nt&quot;&gt;&amp;quot;amount&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  				&lt;span class=&quot;nt&quot;&gt;&amp;quot;unit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
  			&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  			&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  				&lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;flour&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  				&lt;span class=&quot;nt&quot;&gt;&amp;quot;amount&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2.5&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  				&lt;span class=&quot;nt&quot;&gt;&amp;quot;unit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;cups&amp;quot;&lt;/span&gt;
  			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  		&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  		&lt;span class=&quot;nt&quot;&gt;&amp;quot;my_image&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;path to your local image of the recipe&amp;quot;&lt;/span&gt;      
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To get the data looking like this, I had to use brackets in the key name for the postman variables.&lt;/p&gt;

&lt;p&gt;For an array of strings with the key name ‘steps,’ use the following key value pair naming convention:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;steps[] - value1&lt;/li&gt;
  &lt;li&gt;steps[] - value2&lt;/li&gt;
  &lt;li&gt;steps[] - value3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will produce and inputs of: &lt;code&gt;&quot;steps&quot;: [&quot;value1&quot;,&quot;value2&quot;,&quot;value3&quot;]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: the key/value paris have to be one right after the other in Postman for it to be considered part of the SAME array&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To get an array of hashes, use the same method as above but add the hash key names in like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;steps[one] - value1&lt;/li&gt;
  &lt;li&gt;steps[two] - value2&lt;/li&gt;
  &lt;li&gt;steps[three] - value3&lt;/li&gt;
  &lt;li&gt;steps[one] - value4&lt;/li&gt;
  &lt;li&gt;steps[two] - value5&lt;/li&gt;
  &lt;li&gt;steps[three] - value6&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will produce and inputs of:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;steps&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;value1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;two&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;value2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;three&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;value3&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;value4&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;two&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;value5&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;three&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;value6&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Below is a real example of a setup I used when testing the FlourPower Application I worked on:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman_arrays_1.png&quot; alt=&quot;Manage Environments&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The data below was taken directly from running a request against my localhost with a binding.pry in place and asking Rails what the params variable contained:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 	&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Easy Chocolate Cake&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 	&lt;span class=&quot;s2&quot;&gt;&amp;quot;category_names&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Desserts&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 	&lt;span class=&quot;s2&quot;&gt;&amp;quot;steps&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 	&lt;span class=&quot;s2&quot;&gt;&amp;quot;Turn on oven to 350&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   		&lt;span class=&quot;s2&quot;&gt;&amp;quot;Mix Eggs, Chocolate, Flour, and Sugar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   		&lt;span class=&quot;s2&quot;&gt;&amp;quot;Pour into a cast iron pan&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   		&lt;span class=&quot;s2&quot;&gt;&amp;quot;Bake in oven for 15-20 minutes&amp;quot;&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&amp;quot;ingredients&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;flour&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;amount&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;unit&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Cups&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
   		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sugar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;amount&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;2.5&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;unit&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cups&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
   		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;eggs&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;amount&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;unit&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
   		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;chocolate bars&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;amount&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;unit&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;bars&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 	&lt;span class=&quot;s2&quot;&gt;&amp;quot;controller&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;recipes&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 	&lt;span class=&quot;s2&quot;&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;create&amp;quot;&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Hopefully you found these tips helpful as I know I showed them to just about anyone that would listen to me!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2015/12/postman-tips-and-tricks/&quot;&gt;postman tips and tricks&lt;/a&gt; was originally published by Terri Chu at &lt;a href=&quot;http://localhost:4000&quot;&gt;get lost here&lt;/a&gt; on December 22, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[hackathon firsts but not lasts]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2015/11/hackathon-firsts-not-lasts/" />
  <id>http://localhost:4000/2015/11/hackathon-firsts-not-lasts</id>
  <published>2015-11-17T00:00:00-05:00</published>
  <updated>2015-11-17T00:00:00-05:00</updated>
  <author>
    <name>Terri Chu</name>
    <uri>http://localhost:4000</uri>
    <email>terri.chu.dev@gmail.com</email>
  </author>
  <content type="html">
    &lt;h3 id=&quot;first-hackathon-down&quot;&gt;First hackathon down!&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://media4.giphy.com/media/BlsoHMmwpB0gU/200.gif&quot; alt=&quot;woo!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What a crazy cool experience.  It will not be my last one.&lt;/p&gt;

&lt;p&gt;The Iron Yard Hackathon ran from Friday night through Sunday night.&lt;/p&gt;

&lt;h4 id=&quot;hackathon-basics&quot;&gt;Hackathon basics:&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;split up into teams&lt;/li&gt;
  &lt;li&gt;see project problem statements&lt;/li&gt;
  &lt;li&gt;pick a project and GO!
    &lt;ul&gt;
      &lt;li&gt;code&lt;/li&gt;
      &lt;li&gt;eat&lt;/li&gt;
      &lt;li&gt;sleep&lt;/li&gt;
      &lt;li&gt;repeat&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;present and demo your solution at end of 48 hours&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sounds so simple.  It is easily one of the most difficult and rewarding activities I’ve done with my computer for a long time.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Our task:&lt;/b&gt; Build an app (mobile + web app) that would support employees using iBeacons and their iPhones.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Outcomes:&lt;/b&gt;
I had to miss the kick off meeting Friday night but my teammates (Dan, Jonny, Cori, and Mac) did a great job of understanding the problem statement and coming up with a great plan.&lt;/p&gt;

&lt;p&gt;On Saturday, we set to work and back end spent a good portion of the day working on the Sign Up and Login API methods.  Dan and I were faced with some some coding roadblocks going into lunch.  It was almost uncanny that we both came to the exact same “lunch time epiphany” which allowed us to solve a roadbloack!  With that roadblock resolved, we were able to knock out the reamaining API methods by Saturday evening.&lt;/p&gt;

&lt;p&gt;By Sunday, Front End and Mobile teams were hard at work on their UIs while Dan and I worked on fixing up the documentation (so proud), writing Unit Tests, and tweaking the API as needed by the team.  Dan was a great back end partner!  He was able to quickly push out documentation for his code and he put together the most fantastic presentation I have ever seen.  Let me introduce our amazing employee productivity application:&lt;/p&gt;

&lt;h3&gt;Office Hawk!&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/office_hawk.png&quot; alt=&quot;Office Hawk!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I was so proud to work on my team and demo what we created.  Our mobile app and UIs were sleek, wonderful things.  Every person contributed something great.  We truly focused on the purpose of the exercise: working as a team.  I felt like we succeeded and it made me want to build more things.  Soooo when’s the next one?!??&lt;/p&gt;

&lt;p&gt;a few random Marta thoughts from the ride home:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Things I can make pale in comparison to what WE can make together&lt;/li&gt;
  &lt;li&gt;Life greatest adventure is the unknown&lt;/li&gt;
&lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2015/11/hackathon-firsts-not-lasts/&quot;&gt;hackathon firsts but not lasts&lt;/a&gt; was originally published by Terri Chu at &lt;a href=&quot;http://localhost:4000&quot;&gt;get lost here&lt;/a&gt; on November 17, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[first group project reflections]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2015/11/first-group-project-reflections/" />
  <id>http://localhost:4000/2015/11/first-group-project-reflections</id>
  <published>2015-11-13T00:00:00-05:00</published>
  <updated>2015-11-13T00:00:00-05:00</updated>
  <author>
    <name>Terri Chu</name>
    <uri>http://localhost:4000</uri>
    <email>terri.chu.dev@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;We completed our first group project at The Iron Yard on Monday and are about to start the weekend hackathon.  I met with Brit yesterday to reflect on the group project and some code design decisions we made to prep for the hackathon.&lt;/p&gt;

&lt;h4 id=&quot;none-of-us-is-as-smart-as-all-of-us-ken-blanchard&quot;&gt;“None of us is as smart as all of us.” –Ken Blanchard&lt;/h4&gt;

&lt;p&gt;I’ve worked in groups plenty.  However, in the last few years it has been in a lead role.  As a lead, the team expects you to well….lead.  However, the group project at TIY didn’t have a dedicated PM or team lead so I tried to reign it in a bit.  I really admire how Iron Yard places priority on everyone feeling welcome and wanted our team to have the same ‘all opinions are welcomed feel.’  Just keeping that little thought in the back of your mind could help prevent oh so many misunderstandings in every day life.  I tried hard to make sure I didn’t steamroll people and let everyone be heard and the project went off well.&lt;/p&gt;

&lt;p&gt;I thought our project ended successfully as the team had spent a good bit of time working on it on Thursday, Friday, and over the weekend.  We held a public post mortem (project review) on Monday in front of all three of the classes.  During the meeting, I realized that I hadn’t even seen our mobile and front end UIs….uh oh.  After listening to the other teams, I came to the realization that our team did not communicate enough during the project!&lt;/p&gt;

&lt;p&gt;Here are my take-aways from the group project which I plan to keep in mind during the hackathon:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Leading isn’t a bad thing if everyones voices are heard&lt;/li&gt;
  &lt;li&gt;Plan the UI layout and workflow as a team (seriously, this helps all team members understand requirements better)&lt;/li&gt;
  &lt;li&gt;Don’t struggle alone! Even though the your partners don’t know your tools, talking things out with your team can help you work through through logic problems.&lt;/li&gt;
&lt;/ol&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2015/11/first-group-project-reflections/&quot;&gt;first group project reflections&lt;/a&gt; was originally published by Terri Chu at &lt;a href=&quot;http://localhost:4000&quot;&gt;get lost here&lt;/a&gt; on November 13, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[double and....mind blown]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2015/10/double-and-mind-blown/" />
  <id>http://localhost:4000/2015/10/double-and-mind-blown</id>
  <published>2015-10-31T00:00:00-04:00</published>
  <updated>2015-10-31T00:00:00-04:00</updated>
  <author>
    <name>Terri Chu</name>
    <uri>http://localhost:4000</uri>
    <email>terri.chu.dev@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;During class on Thursday, Brit was finishing up walking us through creating a blogging site.  He put up the following code on the screen to check whether the user was logged into the blog:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;current_user&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As I was wondering to myself why he didn’t put a ! on the end of the method name, Brit explained the method returns the ActiveRecord user object if the user is in session and exists in the database.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i3.kym-cdn.com/photos/images/newsfeed/000/897/530/642.gif&quot; alt=&quot;queue this&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From my many years writing in C, I fully expected the function to return a boolean value of true or false!  So many questions flew through my mind so I quickly started pry and began typing.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ruby evaluates the item on the left side, and if not false or nil it evaluates and returns the results of the item on the right side of the &amp;amp;&amp;amp;…..&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://media.giphy.com/media/b8kHKZq3YFfnq/giphy.gif&quot; alt=&quot;wow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ruby is an amazing language!  I am working hard absorb it all so I can utilize its features in thoughtful ways when I write code.  Class is starting to move faster, but I don’t even care.  This is awesome!!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2015/10/double-and-mind-blown/&quot;&gt;double and....mind blown&lt;/a&gt; was originally published by Terri Chu at &lt;a href=&quot;http://localhost:4000&quot;&gt;get lost here&lt;/a&gt; on October 31, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[CNAME no evil...]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2015/10/cname-no-evil/" />
  <id>http://localhost:4000/2015/10/cname-no-evil</id>
  <published>2015-10-27T00:00:00-04:00</published>
  <updated>2015-10-27T00:00:00-04:00</updated>
  <author>
    <name>Terri Chu</name>
    <uri>http://localhost:4000</uri>
    <email>terri.chu.dev@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Setting up this blog has been an interesting journey.  I’ve redone the thing about 5 times and finally settled on using a combination of &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; and &lt;a href=&quot;https://github.com/poole/hyde&quot;&gt;Hyde&lt;/a&gt; (almost funny considering it took me so long to decide).&lt;/p&gt;

&lt;p&gt;Some of the frustrations I’ve run into so far:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instructions seem sparse and as a result setup took a few tries&lt;/li&gt;
  &lt;li&gt;Switching between different setups can cause a major headache (&lt;b&gt;protip&lt;/b&gt;: pick one before pushing to Github or fear the repo-moster)&lt;/li&gt;
  &lt;li&gt;Markdown is a completely new language to me. While people seem to love the simplicity of it, it seems to lack features.  I am hoping that I will get used to using it as I blog more.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Getting my domain hosted by 1&amp;amp;1 to point to my Github URL has proven to be rather difficult.  I’ve been researching this setup most of the evening and have yet to come up with a solution.  Current setup as follows:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Subdomain created for www&lt;/li&gt;
      &lt;li&gt;Set www Subdomain CNAME to point to username.github.io&lt;/li&gt;
      &lt;li&gt;Set main domain to redirect to www Subdomain&lt;/li&gt;
      &lt;li&gt;Create CNAME file with &lt;s&gt;domainname.com&lt;/s&gt; www.domainname.com in it and push to Github&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;Current status&lt;/b&gt; it’s working!!!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/11Feog5PTumNnq/giphy.gif&quot; height=&quot;180&quot; /&gt;&lt;/p&gt;

&lt;s&gt;my domain and blog are experiencing redirect loops and I hope it is just that the DNS changes have not fully propagated.&lt;/s&gt;

&lt;p&gt;&lt;b&gt;Future plans&lt;/b&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;s&gt;validate and fix domain issues for the blog&lt;/s&gt;
  &lt;/li&gt;
  &lt;li&gt;enable Tag view of posts being created&lt;/li&gt;
  &lt;li&gt;drink &lt;b&gt;another&lt;/b&gt; celebratory beer when complete or when a good effort has been detected&lt;/li&gt;
&lt;/ol&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2015/10/cname-no-evil/&quot;&gt;CNAME no evil...&lt;/a&gt; was originally published by Terri Chu at &lt;a href=&quot;http://localhost:4000&quot;&gt;get lost here&lt;/a&gt; on October 27, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[what's cooking lately]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2015/10/whats-cooking/" />
  <id>http://localhost:4000/2015/10/whats-cooking</id>
  <published>2015-10-18T00:00:00-04:00</published>
  <updated>2015-10-18T00:00:00-04:00</updated>
  <author>
    <name>Terri Chu</name>
    <uri>http://localhost:4000</uri>
    <email>terri.chu.dev@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;After starting classes at the Iron Yard, I’ve (for the first time in a long time) wanted to spend more time on my computer outside of the 9 – 5 doing programming things.  Unfortunately, this has eaten into the time I normally spend after work shopping for groceries and making dinners.  Luckily, my friend recommended Blue Apron which I had just started prior to class.  The service sends you ingredients and recipes for three dinners per week for 2 or 4 people.  The send everything but the oil, salt, and pepper!  We have the 2 person plan and it works out to 2-4 servings / meal (depending on how hungry you are or if you choose to supplement with a salad).  Using the service has allowed me to make dinner with the hubster in &amp;lt; 60 minutes without having to go to the store.  No two recipes are repeated in the year which speaks to my irrational ‘I don’t like to eat the same thing twice’ philosophy and they have sent us a few things I have never heard of before.  Hubby and I are in love with the food!&lt;/p&gt;

&lt;p&gt;Here is one of the favorite meals we have had (that I got to photograph before inhaling)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Merguez Lamb Sausages with French Lentils, Mint, and Feta&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
&lt;img src=&quot;/images/lamb_recipe.jpg&quot; alt=&quot;recipe&quot; /&gt;
&lt;img src=&quot;/images/lamb_finished.jpg&quot; alt=&quot;finished dish&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;We have decided to take a break from the service for a few weeks to make stuff we miss from our normal repertoire.  I will definitely be posting recipes and pictures from the upcoming adventures from our menu this week which includes: Coconut braised chicken with chorizo and potatoes (Food &amp;amp; Wine), Spicy mustard greens and pork soup (Epicurious), Fingerling potato and kale hash with egg and cheddar (Blue Apron), and homemade Pork and cilantro dumplings (mix of a few recipes)&lt;/p&gt;

&lt;p&gt;As a bonus here is a fried chicken recipe we attempted last weekend:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://food52.com/recipes/19368-michael-ruhlman-s-rosemary-brined-buttermilk-fried-chicken&quot;&gt;Buttermilk and Rosemary Fried Chicken&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The recipe was unbelievably juicy and the rosemary flavor really came through well.  Keeping the frying oil at the proper temp was very hard and as a result some pieces came out with more browned crust than others.  Overall this was worth the extra brining time and we will be making it again!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fried_chicken.jpeg&quot; alt=&quot;Buttermilk Fried Chicken&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2015/10/whats-cooking/&quot;&gt;what's cooking lately&lt;/a&gt; was originally published by Terri Chu at &lt;a href=&quot;http://localhost:4000&quot;&gt;get lost here&lt;/a&gt; on October 18, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[new chapter through the iron yard]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2015/10/new-chapters/" />
  <id>http://localhost:4000/2015/10/new-chapters</id>
  <published>2015-10-14T00:00:00-04:00</published>
  <updated>2015-10-14T00:00:00-04:00</updated>
  <author>
    <name>Terri Chu</name>
    <uri>http://localhost:4000</uri>
    <email>terri.chu.dev@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;What an amazing last four weeks!&lt;/p&gt;

&lt;p&gt;Hubby and I just returned from a belated honeymoon to California.  It was on that trip that I realized my discontent at work was not 100% due to the position I held.  I love performance testing and that will never change.  Though the last few years, I have been pulled farther and farther away from technical roles and into a project management/pre-sales role.  The move away from the technical stuff was truly impacting my happiness.  I heard of the Iron Yard through my husband who met one of the alumni at work and decided to research it while on our vacation.&lt;/p&gt;

&lt;p&gt;It seemed like a crazy idea to quit my safe, stable job without having a new one lined up.  To also consider spending 3 months in bootcamp to try and reboot my career was terrifying.  My husband was all for it, and I hope he knows how much I appreciate the support and encouragement he has given since the first moment I discussed it with him.  It was an incredibly difficult decision to leave my former career (which seemed to be rolling along quite well) and the company I had been at for 8.5 years.  I met my husband at that company and made some very good friends.  I will really miss working with so many of them!  My decision was solidified after reading up on as many coding bootcamp reviews as I could find and speaking with the instructor Brit.&lt;/p&gt;

&lt;p&gt;After 3.5 weeks in class, I cannot tell you how happy I am that I took the plunge.  My classmates are all awesome with their own stories of how they ended up in bootcamp.  The instructor has such a love for programming, it’s hard not to be excited about things in class (even when exhausted).  I really feel like this is a fantastic chance I have been given and I am NOT going to waste it.&lt;/p&gt;

&lt;p&gt;Prepare for more blogging as I work on fixing up my site.  It won’t be all homework assignments and programming as I plan to include personal side projects and hobbies that I enjoy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/programmer_cat.jpg&quot; alt=&quot;kitty&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2015/10/new-chapters/&quot;&gt;new chapter through the iron yard&lt;/a&gt; was originally published by Terri Chu at &lt;a href=&quot;http://localhost:4000&quot;&gt;get lost here&lt;/a&gt; on October 14, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[chim, chim, churri!]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2014/05/chimchimchurri/" />
  <id>http://localhost:4000/2014/05/chimchimchurri</id>
  <published>2014-05-20T00:00:00-04:00</published>
  <updated>2014-05-20T00:00:00-04:00</updated>
  <author>
    <name>Terri Chu</name>
    <uri>http://localhost:4000</uri>
    <email>terri.chu.dev@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;I went to an amazing eatery that was literally hidden away (took a good 5 minutes to find the door) in Smyrna last Friday called Local Three. We were greeted with the most fabulous Big Labowski painting upon entering the restaurant. Immediately my coworker and I started scheming on ways to get the painting out of the building undetected. Since I figured our plan would be foiled by alcohol and full tummies, I grabbed a snapshot of the magnificence.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dude_supper.jpg&quot; alt=&quot;The dude's last dinner&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Inspired by the fabulous dinner I had there, I decided to make an avocado chimmichuri for our steaks tonight.  It came out a beautiful green color, and was very close to the one I had at the restaurant.  Recipe as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cado_chimi.jpg&quot; alt=&quot;Avocado Chimmichur&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ingredients:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;4 garlic clove, peeled&lt;/li&gt;
  &lt;li&gt;1 jalapeno pepper, seeded and chopped&lt;/li&gt;
  &lt;li&gt;1 poblano pepper , seeded and chopped&lt;/li&gt;
  &lt;li&gt;1.5 bunch fresh curly parsley&lt;/li&gt;
  &lt;li&gt;handful fresh cilantro&lt;/li&gt;
  &lt;li&gt;1/4  cup red wine vinegar&lt;/li&gt;
  &lt;li&gt;1 Tbsp balsamic vinegar salt (or kosher salt)&lt;/li&gt;
  &lt;li&gt;evoo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Instructions:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;throw all ingredients (except evoo) into blender&lt;/li&gt;
  &lt;li&gt;pulse blend and add evoo until you get desired consistency&lt;/li&gt;
  &lt;li&gt;taste and add any additional salt or vinegar as desired&lt;/li&gt;
  &lt;li&gt;seed and cut avocado into chunks&lt;/li&gt;
  &lt;li&gt;mix avocado into sauce and put on a steak!&lt;/li&gt;
&lt;/ol&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2014/05/chimchimchurri/&quot;&gt;chim, chim, churri!&lt;/a&gt; was originally published by Terri Chu at &lt;a href=&quot;http://localhost:4000&quot;&gt;get lost here&lt;/a&gt; on May 20, 2014.&lt;/p&gt;
  </content>
</entry>

</feed>
